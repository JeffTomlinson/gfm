<?php
/**
 * @file
 * Provides enhancements to the Markdown syntax as defined at:
 * http://github.github.com/github-flavored-markdown/
 */

/**
 * Implements hook_filter_info().
 */
function gfm_filter_info() {
  $filters['github_flavored_markdown'] = array(
    'title' => t('Github Flavored Markdown'),
    'description' => t('Provides added functionality to Markdown filter. Ensure GFM is run first.'),
    'prepare callback' => '_gfm_prepare_callback',
    'process callback' => '_gfm_process_callback',
    'settings callback' => '_gfm_settings_callback',
    'default settings' => array(
      'gfm_autolink' => 1,
      'gfm_fenced_code' => 1,
      'gfm_syntax_higlighting' => 0,
      'gfm_escape_underscores' => 1,
      'gfm_hardwrap_newlines' => 1,
      'gfm_strikethrough' => 1,
    ),
    'tips callback' => '_gfm_filter_tips',
  );

  return $filters;
}

/**
 * Returns the markdown input filter tips.
 * @TODO: make it easier for translators.
 */
function _gfm_filter_tips($format, $long = FALSE) {
  if ($long) {
    return t('Github Flavored Markdown:<ul>
      <li>Single returns act as line breaks</li>
      <li>URLs lik http://www.example.com are autolinked.</li>
      <li>~~Double tilde~~ = <del>Strikethrough</del></li>
      <li>Multiple underscores in words do not trigger italics</li>
      <li>Use ``` for code fencing: <br/>```<br/>$foo = $bar;<br/>```</li>
      <li>Use ```[language] for syntax highlighting: <br/>```php<br/>$foo = $bar;<br/>```</li>
      </ul>For more information see: <a href="https://help.github.com/articles/github-flavored-markdown">Github Flavored Markdown</a>.');
  }
  else {
    return t('For more information see: !github.', array('!github' => lt('Github Flavored Markdown'), 'https://help.github.com/articles/github-flavored-markdown'));
  }
}

/**
 *  Prepare callback.
 */
function _gfm_prepare_callback($text, $filter) {
  if (!empty($text)) {
    // Syntax highlighting.
    if ($filter->settings['gfm_fenced_code'] && $filter->settings['gfm_syntax_higlighting'] && module_exists('geshifilter')) {
      $text = preg_replace_callback('/`{3}([\w+-]+)?[ \t]*\n(?:.*$\n)?([\s\S]*?)\n`{3}.*/', '_gfm_prepare_fenced_code', $text);
    }
  }
  
  return $text;
}

/**
 *  Process callback.
 */
function _gfm_process_callback($text, $filter, $format) {
  if (!empty($text)) {
    // Fenced code blocks.
    if ($filter->settings['gfm_fenced_code'] && (!$filter->settings['gfm_syntax_higlighting'] || !module_exists('geshifilter'))) {
      $text = preg_replace_callback('/`{3}([\w+-]+)?[ \t]*\n(?:.*$\n)?([\s\S]*?)\n`{3}.*/', '_gfm_process_fenced_code', $text);
    }

    // Prevent foo_bar_baz from ending up with an italic word in the middle.
    if ($filter->settings['gfm_escape_underscores']) {
      $text = preg_replace_callback('/((?! {4}|\t)\w+_\w+_\w[\w_]*)/', '_gfm_process_escape_underscores', $text);
    }

    // Autolink urls.
    if ($filter->settings['gfm_autolink']) {
      $text = _gfm_normalize_link_definitions($text);
      $text = _gfm_autolink($text);
    }

    // Let single newlines become <br /> tags.
    if ($filter->settings['gfm_hardwrap_newlines']) {
      $text = preg_replace_callback('/[\w\<][^\n]*\n+/', '_gfm_process_hardwrap_newlines', $text);
    }
    
    // Add ~~strikethrough text~~.
    if ($filter->settings['gfm_strikethrough']) {
      $text = preg_replace_callback('/(~~)([\s\S]+?)(~~)/', '_gfm_process_strikethrough', $text);
    }
  }
  
  return $text;
}

/**
 *  Process hardwrap newlines.
 */
function _gfm_process_hardwrap_newlines($matches) {
  if (preg_match('/\n\n/', $matches[0])) {
    return $matches[0];
  }
  else {
    return trim($matches[0]) . "  \n";
  }
}

/**
 *  Process strikethrough.
 */
function _gfm_process_strikethrough($matches) {
  return '<del>'. str_replace($matches[1], '', $matches[2]) .'</del>';
}

/**
 *  Process escape underscores.
 */
function _gfm_process_escape_underscores($matches) {
  return str_replace('_', '\_', $matches[0]);
}

/**
 *  Prepare fenced code.
 *
 *  Used to prepare for GeSHi syntax highlighting.
 */
function _gfm_prepare_fenced_code($matches) {
  $text = '<code language="'. $matches[1] .'">' . "\n";
  $text .= $matches[2];
  $text .= "\n" . '</code>';
  
  return $text;
}

/**
 *  Process fenced code.
 */
function _gfm_process_fenced_code($matches) {
  $text = '<pre>';
  $text .= $matches[2];
  $text .= '</pre>';
  
  return $text;
}

/**
 *  Helper function for autolinking.
 */
function _gfm_autolink($text) {
  return preg_replace_callback('{
    # http://rubular.com/r/GRYtdjYzZK
    (?<!]:\s)               # attempt to ignore link definitions of reference-style links
    (?<=\A|[\s])            # positive lookbehind for BOF or tab, newline, or space
      ((f|ht)tps?://){0,1}  # optional scheme name, only ftp/http/https
      ([-\w]+\.)+           # server name(s) and domain
      [a-zA-Z0-9]{2,4}      # TLD
      (:\d{1,5})?           # optional port
      ([/?#][^\s]*)?        # optional path, query or fragment
    (?=\Z|[\s,.])           # positive lookahead for EOF or tab, newline, space, comma, or period
    }x',
    '_gfm_autolink_callback', $text);
}

/**
 *  Autolink callback.
 */
function _gfm_autolink_callback($matches) {
  $url = $matches[0];
  $full_url = (preg_match('{^(f|ht)tps?://}x', $url)) ? $url : 'http://' . $url;
  return '[' . $url . '](' . $full_url . ')';
}

/**
 *  Helper function for normalizing whitespace in link definintions.
 */
function _gfm_normalize_link_definitions($text) {
  // Thanks to Michel Fortin/Markdown PHP for the following regex.
  return preg_replace_callback('{
    ^[ ]{0,3}\[(.+)\][ ]?:  # id = $1
        [ ]*
        \n?       # maybe *one* newline
        [ ]*
      (?:
        <(.+?)>     # url = $2
      |
        (\S+?)      # url = $3
      )
        [ ]*
        \n?       # maybe one newline
        [ ]*
      (?:
        (?<=\s)     # lookbehind for whitespace
        ["(]
        (.*?)     # title = $4
        [")]
        [ ]*
      )?  # title is optional
      (?:\n+|\Z)
    }xm',
    '_gfm_normalize_link_definitions_callback', $text);
}

/**
 *  Link definition normalization callback.
 */
function _gfm_normalize_link_definitions_callback($matches) {
  $url = (!empty($matches[2])) ? $matches[2] : $matches[3];
  $title = (!empty($matches[4])) ? ' "' . $matches[4] . '"' : '';
  return '[' . $matches[1] . ']: ' . $url . $title . "\n";
}

/**
 *  Settings callback.
 */
function _gfm_settings_callback($form, &$form_state, $filter, $format, $defaults, $filters) {
  $filter->settings += $defaults;

  $elements = array();
  
  $elements['gfm_autolink'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable autolinking'),
    '#default_value' => $filter->settings['gfm_autolink'],
  );
  
  $elements['gfm_fenced_code'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable fenced code'),
    '#default_value' => $filter->settings['gfm_fenced_code'],
  );
  
  $elements['gfm_syntax_higlighting'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable syntax highlighting (requires !geshi)', array('!geshi' => l(t('GeSHi Filter'), 'https://drupal.org/project/geshifilter'))),
    '#default_value' => $filter->settings['gfm_syntax_higlighting'],
  );
  
  $elements['gfm_escape_underscores'] = array(
    '#type' => 'checkbox',
    '#title' => t('Escape underscores in words (Not needed with Markdown Extra)'),
    '#default_value' => $filter->settings['gfm_escape_underscores'],
  );
  
  $elements['gfm_hardwrap_newlines'] = array(
    '#type' => 'checkbox',
    '#title' => t('Hard wrap single newlines'),
    '#default_value' => $filter->settings['gfm_hardwrap_newlines'],
  );
  
  $elements['gfm_strikethrough'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable ~~strikethrough~~'),
    '#default_value' => $filter->settings['gfm_strikethrough'],
  );
  
  return $elements;
}
